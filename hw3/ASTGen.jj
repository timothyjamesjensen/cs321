// Tim Jensen
// CS 321
// Assignment 3 Task 2


PARSER_BEGIN(ASTGen)

public class ASTGen {
  public static void main(String args[]) throws ParseException {
    new ASTGen(System.in); 
    NameType test;
    test = NameType();
    System.out.println(test.toString());
  }
}

PARSER_END(ASTGen)

void Top() : {} {
  (Class())* <EOF>
}

void Class() : {} { // Using multiple lines for better readability!
  ("abstract")?
     "class" Id()
     ("(" Args() ")")?
     ("{" (Class())* "}")?
}

void Args() : {} {
  (Arg() ("," Arg())*)?
}

void Arg() : {} {
  ("public" | "protected" | "private")? Type() Id()
}

void Type() : {} {
  NameType() ("[" "]")*
}

NameType NameType() : { String[] ids; } {
  ids = Ids(0) { return new NameType(ids); }
}

String[] Ids(int soFar): {Token id; String[] ids; } {
  id = Id() ("." ids=Ids(soFar+1) | { ids = new String[soFar+1]; } )
  { ids[soFar] = id.image; return ids; }
}

Token Id() : { Token t; } {
  t=<IDENT>
  { return t; }
}

//-- Define the lexical structure of an input language: ----------------------

// Input elements that should be ignored/skipped:
SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* ("*" | ~["*","/"] (~["*"])* "*")* "/">
}


// Lexemes that should be reported as valid tokens:
TOKEN : {
  <IDENT:   <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["A"-"Z","a"-"z","_"]>
| <#DIGIT:  ["0"-"9"]>
}
