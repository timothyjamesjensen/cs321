// Tim Jensen
// CS 321
// Assignment 3 Task 2


PARSER_BEGIN(ASTGen)

public class ASTGen {
  public static void main(String args[]) throws ParseException {
    new ASTGen(System.in); 
    Class[] classes;
    classes = Top();

    Class.genJava(0, classes, null, null);    

    //System.out.println(test.last.toString());
  }
}

PARSER_END(ASTGen)

Class[] Top() : { Class[] c = null; } {
  ( c = classList(0) ) <EOF> 
  { return c; }
}

Class Class() : { boolean isAbstract = false; Token name; Args args = null;
                  Class[] subClasses = new Class[0]; Class sc; } { 
  ("abstract" {isAbstract = true; } )?
     "class" name = Id()
     ("(" args = Args() ")")?
     ("{" ( subClasses = classList(0) ) "}")?


  { return new Class(isAbstract, name.image, args, subClasses); } 
} 

Class[] classList(int soFar) : { Class c; Class[] subClasses = new Class[0]; } {
  c = Class() 
  ( subClasses=classList(soFar+1) | { subClasses = new Class[soFar+1]; } )
  { subClasses[soFar] = c; 
    return subClasses; }
}

Args Args() : { Args before = null; Arg last; } {
  (last = Arg() {before = new Args(null, last); } 
	("," last = Arg() { before = new Args (before, last); } )*)?

  { return before; }
}

Arg Arg() : { String v; Type t; Token id;} {
  v = Visibility() t = Type() id = Id()
  { return new Arg(v, t, id.image); }
}

String Visibility() : {} {
  ("public"     { return "public";}
  | "protected" { return "protected";}
  | "private"   { return "private"; })?
                { return null; }
}

Type Type() : { Type t; } {
  t = NameType() ("[" "]" { t = new ArrayType(t); } )*
  { return t; }
}

NameType NameType() : { String[] ids; } {
  ids = Ids(0) { return new NameType(ids); }
}

String[] Ids(int soFar): {Token id; String[] ids; } {
  id = Id() ("." ids=Ids(soFar+1) | { ids = new String[soFar+1]; } )
  { ids[soFar] = id.image; return ids; }
}

Token Id() : { Token t; } {
  t=<IDENT>
  { return t; }
}

//-- Define the lexical structure of an input language: ----------------------

// Input elements that should be ignored/skipped:
SKIP : {
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
| <"/*" (~["*"])* ("*" | ~["*","/"] (~["*"])* "*")* "/">
}


// Lexemes that should be reported as valid tokens:
TOKEN : {
  <IDENT:   <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["A"-"Z","a"-"z","_"]>
| <#DIGIT:  ["0"-"9"]>
}
